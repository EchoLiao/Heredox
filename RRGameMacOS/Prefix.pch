//
//  Prefix.pch
//  RRHeredox
//
//  Created by Rolandas Razma on 7/13/12.
//
//  Copyright (c) 2012 Rolandas Razma <rolandas@razma.lt>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

#ifdef __OBJC__
    #import <Cocoa/Cocoa.h>
    #import <Foundation/Foundation.h>
    #import <GameKit/GameKit.h>

    #define CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 1
    #define CC_USE_LA88_LABELS 0
    #define CC_ENABLE_DEPRECATED 0
    #import "cocos2d.h"

    #import "UDMath.h"
    #import "UDLog.h"
    #import "UDMacros.h"
    #import "NSMutableArray+UDAdditions.h"
    #import "CGGeometry+UDAdditions.h"
    #import "UDActionCallFunc.h"
    #import "UDActionDestroy.h"
    #import "UDSpriteButton.h"
    #import "RRTransitionGame.h"
    #import "NSBlock+Additions.h"

    #import "RRAudioEngine.h"
    #import "RRHeredox.h"
    #import "GKTurnBasedMatch+RRHeredox.h"

    #import "GKLocalPlayer.h"
#endif


#define RR_ADD_INSTANCE_METHOD(__CLASS__, __ORIG_SELECTOR__, __NEW_SELECTOR__) {                                                            \
    Method newInstanceMethod = class_getInstanceMethod(__CLASS__, __NEW_SELECTOR__);                                                        \
    class_addMethod(__CLASS__, __ORIG_SELECTOR__, method_getImplementation(newInstanceMethod), method_getTypeEncoding(newInstanceMethod));  \
}